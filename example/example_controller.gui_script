local DefGamesnacks = require("defgamesnacks.defgamesnacks")
local Mock = require("defgamesnacks.utils.mock")

DefGamesnacks:setup_mock(Mock)

local NODES = {
	ID_CONTROL_PANEL = hash("control_panel"),

	ID_BUTTON_SHOW_REWARDED_AD = hash("button_show_rewarded_ad"),
	ID_BUTTON_CHECK_REWARDED_AD = hash("button_check_rewarded_oportunity"),
	ID_BUTTON_IS_AUDIO_ENABLED = hash("button_is_audion_enabled"),
	ID_BUTTON_LEVEL_COMPLETE = hash("button_level_complete"),
	ID_BUTTON_GAME_OVER = hash("button_game_over"),
	ID_BUTTON_SEND_SCORE = hash("button_send_score"),

	ID_TEXT_AUDIO_STATE = "text_audio_state"
}

local ACTION_TOUCH = hash("touch")

local function enable_show_rewarded_ad(self, value)
	gui.set_enabled(self.view.button_rewarded_ad, value)
end

local function check_rewarded(self)
	print("check rewarded")
	DefGamesnacks:check_rewarded_ad_opportunity()
end

local function show_rewarded(self)
	print("show_rewarded")
	enable_show_rewarded_ad(self, false)
	DefGamesnacks:show_rewarded_ad()
end

local function send_game_over(self)
	print("send_game_over")
	DefGamesnacks:send_game_over()
end

local function send_level_complte(self)
	print("send_level_complte")
	DefGamesnacks:send_level_complete(self.level_test_id)
	self.level_test_id = self.level_test_id + 1
end

local function send_score(self)
	print("send_score")
	DefGamesnacks:send_score(self.score_value)
	self.score_value = self.score_value + 10
end

local function get_audio_state()
	return DefGamesnacks:is_audio_enabled()
end

local function check_audio(self)
	print("check_audio")
	local audio_state = get_audio_state()
	print("Is audio enabled ", audio_state)
end

local function set_audio_state(self, text_state)
	gui.set_text(self.view.text_audio_state, text_state)
end

local function on_audio_state_changed(self)
	print("audio state changed")
	local audio_state = get_audio_state()
	set_audio_state(self, string.format( "Audio: %s", tostring(audio_state)) )
end

local function on_rewarded_ad_ready(self)
	print("enabled ad show!")
	enable_show_rewarded_ad(self, true)
end

local function init_game(self)
	self.level_test_id = 0
	self.score_value = 100

	DefGamesnacks:add_audio_listener(function()
		on_audio_state_changed(self)
	end)

	local callbacks = {}
	callbacks[DefGamesnacks.REWARDED_AD_CALLBACK_TYPE.before_reward] = on_rewarded_ad_ready

	DefGamesnacks:add_rewarded_ad_listener_callbacks(callbacks)

	DefGamesnacks:game_ready()
end

local function show_controls(self)
    gui.set_enabled(self.view.control_panel, true)
end

local function add_button(buttons, button_id, fn_button)
	local button_bind = {
		button = gui.get_node(button_id),
		fn_button = fn_button
	}
	table.insert( buttons, button_bind )
end

local function bind_buttons()
	local buttons = {}

	add_button(buttons, NODES.ID_BUTTON_CHECK_REWARDED_AD, check_rewarded)
	add_button(buttons, NODES.ID_BUTTON_GAME_OVER, send_game_over)
	add_button(buttons, NODES.ID_BUTTON_IS_AUDIO_ENABLED, check_audio)
	add_button(buttons, NODES.ID_BUTTON_LEVEL_COMPLETE, send_level_complte)
	add_button(buttons, NODES.ID_BUTTON_SHOW_REWARDED_AD, show_rewarded)
	add_button(buttons, NODES.ID_BUTTON_SEND_SCORE, send_score)

	return buttons
end

local function init_view(self)
	local view = {}

	view.control_panel = gui.get_node(NODES.ID_CONTROL_PANEL)
	view.text_audio_state = gui.get_node(NODES.ID_TEXT_AUDIO_STATE)
	view.button_rewarded_ad = gui.get_node(NODES.ID_BUTTON_SHOW_REWARDED_AD)
	--gui.set_enabled(view.control_panel, false)

	view.buttons = bind_buttons()
	self.view = view
	show_controls(self)
	enable_show_rewarded_ad(self, false)
end

function init(self)
    msg.post(".", "acquire_input_focus")
	init_game(self)
	init_view(self)
end

function on_input(self, action_id, action)
	if action_id ~= ACTION_TOUCH then
		return false
	end

	for _, button_data in ipairs(self.view.buttons) do
		if gui.pick_node(button_data.button, action.x, action.y) and action.released then
			button_data.fn_button(self)
			return true
		end
	end
end
